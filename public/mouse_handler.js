class MouseHandler{constructor(a,b){this.controller=a,this.graphics=b,this.isDraggingScreen,this.dragX=null,this.dragY=null,this.initListeners()}initListeners(){document.addEventListener("mousedown",this.mousedown.bind(this)),document.addEventListener("touchstart",this.mousedown.bind(this)),document.addEventListener("mouseup",this.mouseup.bind(this)),document.addEventListener("touchend",this.mouseup.bind(this)),document.addEventListener("mousemove",this.mousemove.bind(this)),document.addEventListener("touchmove",this.mousemove.bind(this));const a=document.getElementById("enter");a.addEventListener("click",this.enterName.bind(this)),document.addEventListener("keyup",this.enterNameKey.bind(this))}mousedown(a){if(!this.controller.hasName())return;a.touches&&(a=a.touches[0]),this.dragX=a.clientX,this.dragY=a.clientY;let b=null;if(this.controller.isTurn()){const c=this.controller.getCards();for(let d=c.length-1;0<=d;d--){const e=this.graphics.convertRealToVirtualX(a.clientX),f=this.graphics.convertRealToVirtualY(a.clientY);if(c[d].intersects(e,f)){b=c[d];break}}}return null==b?this.isDraggingScreen=!0:this.controller.grabCard(b),!1}mousemove(a){if(!this.controller.hasName())return;if(a.touches&&(a=a.touches[0]),null==this.dragX||null==this.dragY)return;const b=a.clientX-this.dragX,c=a.clientY-this.dragY;if(this.dragX=a.clientX,this.dragY=a.clientY,this.controller.isCardGrabbed()){const a=this.graphics.convertToVirtualScale(b),d=this.graphics.convertToVirtualScale(c);this.controller.moveCard(a,d)}else this.isDraggingScreen&&this.graphics.dragScreen(b,c)}mouseup(){this.controller.hasName()&&(this.controller.releaseCard(),this.dragX=null,this.dragY=null,this.isDraggingScreen=!1)}enterName(){const a=document.getElementById("name").value;this.controller.submitName(a)}enterNameKey(a){13!==a.keyCode||this.enterName(a)}}"undefined"!=typeof module&&(module.exports=MouseHandler);