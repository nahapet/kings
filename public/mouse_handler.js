class MouseHandler{constructor(a,b,c){this.controller=a,this.graphics=b,this.slider=c,this.isDraggingScreen,this.isZooming=!1,this.dragX=null,this.dragY=null,this.inviteButton=null,this.pinchDist=null,this.initListeners()}initListeners(){document.addEventListener("mousedown",this.mousedown.bind(this)),document.addEventListener("touchstart",this.mousedown.bind(this)),document.addEventListener("mousemove",this.mousemove.bind(this)),document.addEventListener("touchmove",this.mousemove.bind(this)),document.addEventListener("mouseup",this.mouseup.bind(this)),document.addEventListener("touchend",this.mouseup.bind(this));const a=document.getElementById("players");a.addEventListener("touchstart",this.suppressTouch.bind(this)),a.addEventListener("touchmove",this.suppressTouch.bind(this)),a.addEventListener("touchend",this.suppressTouch.bind(this)),this.inviteButton=document.getElementById("invite"),this.inviteButton.addEventListener("mousedown",this.copyInvite.bind(this));const b=document.getElementById("changeName");b.addEventListener("mousedown",this.openChangeName.bind(this));const c=document.getElementById("joinGame");c.addEventListener("mousedown",this.openJoinGame.bind(this));const d=document.getElementById("overlay");d.addEventListener("mousedown",this.closeOverlay.bind(this));const e=document.getElementById("overlayContent");e.addEventListener("mousedown",this.suppressTouch.bind(this)),document.addEventListener("keyup",this.maybeSubmitForm.bind(this));const f=document.getElementById("enter");f.addEventListener("mousedown",this.submitForm.bind(this)),this.slider.addEventListener("mousedown",this.zoomStart.bind(this)),this.slider.addEventListener("touchstart",this.zoomStart.bind(this)),this.slider.addEventListener("mousemove",this.zoom.bind(this)),this.slider.addEventListener("touchmove",this.zoom.bind(this)),this.slider.addEventListener("mouseup",this.zoomEnd.bind(this)),this.slider.addEventListener("touchend",this.zoomEnd.bind(this))}suppressTouch(a){a.stopPropagation()}mousedown(a){if(!this.controller.hasName())return;if(a.touches){if(1<a.touches.length)return void this.pinchStart(a);a=a.touches[0]}this.dragX=a.clientX,this.dragY=a.clientY;let b=null;if(this.controller.isTurn()){const c=this.controller.getCards();for(let d=c.length-1;0<=d;d--){const e=this.graphics.convertRealToVirtualX(a.clientX),f=this.graphics.convertRealToVirtualY(a.clientY);if(c[d].intersects(e,f)){b=c[d];break}}}return null==b?this.isDraggingScreen=!0:this.controller.grabCard(b),!1}mousemove(a){if(!this.controller.hasName())return;if(a.touches){if(1<a.touches.length)return void this.pinchZoom(a);a=a.touches[0]}if(null==this.dragX||null==this.dragY)return;const b=a.clientX-this.dragX,c=a.clientY-this.dragY;if(this.dragX=a.clientX,this.dragY=a.clientY,this.controller.isCardGrabbed()){const a=this.graphics.convertToVirtualScale(b),d=this.graphics.convertToVirtualScale(c);this.controller.moveCard(a,d)}else this.isDraggingScreen&&this.graphics.dragScreen(b,c)}mouseup(a){return this.controller.hasName()?a.touches&&1<a.touches.length?void this.pinchEnd(a):void(this.controller.releaseCard(),this.dragX=null,this.dragY=null,this.isDraggingScreen=!1):void 0}copyInvite(){event.stopPropagation(),this.controller.copyInvite(this.inviteButton)}openChangeName(){event.stopPropagation(),this.controller.openChangeName()}openJoinGame(){event.stopPropagation(),this.controller.openJoinGame()}closeOverlay(){event.stopPropagation(),this.controller.closeOverlay()}submitForm(){this.controller.submitForm(),this.closeOverlay()}maybeSubmitForm(a){13!==a.keyCode||this.submitForm()}zoomStart(a){a.stopPropagation(),this.isZooming=!0}zoom(a){this.isZooming&&(a.stopPropagation(),this.controller.setZoom(a.target.value))}zoomEnd(){this.isZooming=!1}pinchStart(a){const b=Math.hypot(a.touches[0].pageX-a.touches[1].pageX,a.touches[0].pageY-a.touches[1].pageY);this.pinchDist=b,this.controller.pinchStart()}pinchZoom(a){const b=Math.hypot(a.touches[0].pageX-a.touches[1].pageX,a.touches[0].pageY-a.touches[1].pageY);if(null!=this.pinchDist){const a=b/this.pinchDist;this.controller.setPinchZoom(a)}}pinchEnd(){this.pinchDist=null}}"undefined"!=typeof module&&(module.exports=MouseHandler);