class Graphics{constructor(a,b,c){this.controller=a,this.canvas=b,this.ctx=c,this.dragX=0,this.dragY=0,this.cardBackImage=null,this.tableImage=null,this.cardFaceImages={},this.loadImages(),this.drawLoop()}loadImages(){this.cardBackImage=new Image,this.cardBackImage.src="images/back.png",this.tableImage=new Image,this.tableImage.src="images/wood.jpg",Card.RANKS.forEach(a=>{this.cardFaceImages[a]={},Card.SUITES.forEach(b=>{const c=new Image;this.cardFaceImages[a][b]=c,c.src=`images/cards/${a}${b}.png`})})}drawLoop(){this.clearAndResize(),this.drawCards(),setTimeout(this.drawLoop.bind(this),100)}clearAndResize(){var a=Math.min;const{ctx:b}=this,c=window.innerWidth,d=window.innerHeight;if(this.translateX=c/2,this.translateY=d/2,!this.scale){const b=c/(5*Card.HEIGHT),e=d/(5*Card.HEIGHT);this.scale=a(b,e)}this.canvas.width=c,this.canvas.height=d,b.setTransform(1,0,0,1,0,0);const e=b.createPattern(this.tableImage,"repeat");if(null!=e){const a=new DOMMatrix;e.setTransform(a.translateSelf(this.dragX,this.dragY,0))}b.fillStyle=e,b.fillRect(0,0,c,d),b.translate(this.translateX,this.translateY),b.translate(this.dragX,this.dragY),b.scale(this.scale,this.scale)}drawCards(){const a=this.controller.getCards();for(const b in a)a[b].draw(this.ctx,this.cardBackImage,this.cardFaceImages)}convertRealToVirtualX(a){return(a-this.translateX-this.dragX)/this.scale}convertRealToVirtualY(a){return(a-this.translateY-this.dragY)/this.scale}convertToVirtualScale(a){return a/this.scale}dragScreen(a,b){this.dragX+=a,this.dragY+=b}}"undefined"!=typeof module&&(module.exports=Graphics);