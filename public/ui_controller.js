class UIController{constructor(){this.name=null,this.socket=io(),this.canvas=document.getElementById("canvas"),this.slider=document.getElementById("slider"),this.graphicsContext=canvas.getContext("2d"),this.cards=[],this.grabbedCardID=null,this.players=[],this.currentPlayerIndex=null}begin(){this.graphics=new Graphics(this,this.canvas,this.graphicsContext),new MouseHandler(this,this.graphics,this.slider),this.socket.on("card data",this.updateCardsFromScocket.bind(this)),this.socket.on("single card data",this.updateSingleCardFromScocket.bind(this)),this.socket.on("register name",this.updateName.bind(this)),this.socket.on("players",this.updatePlayers.bind(this)),this.socket.on("game ID error",this.showError.bind(this)),this.socket.on("card download",this.downloadCardImage.bind(this)),this.socket.on("rearrange cards",this.rearrangeCards.bind(this))}updateName(a){const{playerName:b,gameID:c}=a;this.name=b;const d=document.getElementsByTagName("body")[0];d.className="playing";const e=document.getElementById("gameID");e.innerHTML="Game ID:<span>"+c+"</span>"}updatePlayers(a){this.players=a.players,this.currentPlayerIndex=a.currentPlayerIndex;const b=document.getElementById("players");for(;b.firstChild;)b.removeChild(b.firstChild);for(let c in this.players){const a=this.players[c],d=document.createElement("div");d.innerHTML=a,a==this.name&&(d.innerHTML+=" (You)"),c==this.currentPlayerIndex&&(d.className="current"),b.appendChild(d)}}hasName(){return null!=this.name}isTurn(){return this.players.indexOf(this.name)===this.currentPlayerIndex}submitName(a,b,c){b=b.toUpperCase();this.hasName()||this.socket.emit("enter",{name:a,gameID:b,verifyGameID:c})}cloneCard(a){return new Card(a.id,a.rotation,a.x,a.y,a.freed,a.rank,a.suite,a.width,a.height)}updateCardsFromScocket(a){this.cards=[],a.forEach(a=>{const b=this.cloneCard(a);this.cards.push(b)})}updateSingleCardFromScocket(a){const{id:b,card:c}=a;for(let d in this.cards){const a=this.cards[d];if(a.id==b)return void(this.cards[d]=this.cloneCard(c))}}rearrangeCards(a){const{from:b,to:c}=a,d=this.cards.splice(b,1)[0];this.cards.splice(c,0,d)}showError(){const a=document.getElementsByTagName("body")[0];a.className="error"}getCards(){return this.cards}isCardGrabbed(){return null!==this.grabbedCardID}grabCard(a){this.grabbedCardID=a.id,this.socket.emit("card move",{id:a.id,x:0,y:0})}releaseCard(){null!=this.grabbedCardID&&this.socket.emit("card release",{id:this.grabbedCardID}),this.grabbedCardID=null}moveCard(a,b){null==this.grabbedCardID||this.socket.emit("card move",{id:this.grabbedCardID,x:a,y:b})}downloadCardImage(a){const{rank:b,suite:c}=a;this.graphics.downloadCardImage(b,c)}setZoom(a){const b=Math.pow(10,a/100);this.graphics.setUserScale(b)}updateSlider(a){const b=100*Math.log10(a);this.slider.value=b}}"undefined"!=typeof module&&(module.exports=UIController);