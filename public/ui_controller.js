class UIController{constructor(){this.name=this.loadName(),this.gameID=null,this.socket=io(),this.onScreenCanvas=document.getElementById("canvas"),this.offScreenCanvas=document.getElementById("canvas2"),this.slider=document.getElementById("slider"),this.onScreenCTX=this.onScreenCanvas.getContext("2d"),this.offScreenCTX=this.offScreenCanvas.getContext("2d"),this.cards=[],this.grabbedCard=null,this.players=[],this.currentPlayerIndex=null,this.pinchStartScale=null}loadName(){const a=window.localStorage;return a?a.getItem("name"):null}begin(){this.graphics=new Graphics(this,this.onScreenCanvas,this.offScreenCanvas,this.onScreenCTX,this.offScreenCTX),new MouseHandler(this,this.graphics,this.slider),this.requestNameAndGame(),window.addEventListener("hashchange",this.requestNameAndGame.bind(this)),this.socket.on("reconnect",this.joinGame.bind(this)),this.socket.on("card data",this.updateCardsFromScocket.bind(this)),this.socket.on("single card data",this.updateSingleCardFromScocket.bind(this)),this.socket.on("register name",this.updateName.bind(this)),this.socket.on("players",this.updatePlayers.bind(this)),this.socket.on("card download",this.downloadCardImage.bind(this)),this.socket.on("rearrange cards",this.rearrangeCards.bind(this))}requestNameAndGame(){const a=window.location.hash;let b=null;a.startsWith("#")&&(b=a.substring(1)),(null==this.gameID||this.gameID!=b)&&(this.gameID=b,this.joinGame())}joinGame(){this.socket.emit("join",{name:this.name,gameID:this.gameID})}updateName(a){const{playerName:b,gameID:c}=a;this.name=b,this.gameID=c,console.log("updateName!!",b,c);const d=window.localStorage;d&&d.setItem("name",this.name);const e=document.getElementById("gameID");e.innerHTML=c,window.location.hash="#"+c;const f=document.getElementById("inputName");f.value=this.name;const g=document.getElementById("inputGameCode");g.value=this.gameID}updatePlayers(a){this.players=a.players,this.currentPlayerIndex=a.currentPlayerIndex;const b=document.getElementById("players");for(;b.firstChild;)b.removeChild(b.firstChild);for(let c in this.players){const a=this.players[c],d=document.createElement("div");d.className="bubble";const e=a==this.name,f=c==this.currentPlayerIndex;e&&f?d.innerHTML+="<span>Your Turn!</span>":e?d.innerHTML+="<span>You</span>":f&&(d.innerHTML+="<span>Their Turn</span>"),d.innerHTML+=a,f&&(d.className+=" current"),b.appendChild(d)}}hasName(){return null!=this.name}isTurn(){return this.players.indexOf(this.name)===this.currentPlayerIndex}updateCardsFromScocket(a){this.cards=[],a.forEach(a=>{const b=Card.from(a);this.cards.push(b)})}updateSingleCardFromScocket(a){const{id:b,card:c,name:d}=a;for(let e in this.cards){const a=this.cards[e];if(a.id==b)return d!=this.name&&(a.x=c.x,a.y=c.y),a.freed=c.freed,a.rank=c.rank,void(a.suite=c.suite)}}rearrangeCards(a){const{from:b,to:c}=a,d=this.cards.splice(b,1)[0];this.cards.splice(c,0,d)}getCards(){return this.cards}isCardGrabbed(){return null!==this.grabbedCard}grabCard(a){this.grabbedCard=a,this.socket.emit("card move",{id:a.getID(),x:0,y:0})}releaseCard(){null!=this.grabbedCard&&this.socket.emit("card release",{id:this.grabbedCard.getID()}),this.grabbedCard=null}moveCard(a,b){null==this.grabbedCard||(this.grabbedCard.x+=a,this.grabbedCard.y+=b,this.socket.emit("card move",{id:this.grabbedCard.getID(),x:a,y:b}))}downloadCardImage(a){const{rank:b,suite:c}=a;this.graphics.downloadCardImage(b,c)}setZoom(a){const b=Math.pow(10,a/100);this.graphics.setUserScale(b)}pinchStart(){this.pinchStartScale=this.graphics.getScale()}setPinchZoom(a){if(null!=this.pinchStartScale){const b=this.pinchStartScale*a;this.graphics.setUserScale(b)}}updateSlider(a){const b=100*Math.log10(a);this.slider.value=b}copyInvite(a){let b=!1;if(navigator.share&&navigator.share({title:document.title,text:"Play King's Cup with me!",url:window.location.href}).then(()=>b=!0),!b){const a=document.getElementById("inviteText");a.value="Play King's Cup with me! "+window.location.href,a.select(),document.execCommand("copy")}const c=a.className;a.className+=" copied",setTimeout(()=>{a.className=c},1e3)}openChangeName(){this.openJoinGame()}openJoinGame(){const a=document.getElementsByTagName("body")[0];a.className=""}closeOverlay(){const a=document.getElementsByTagName("body")[0];a.className="playing"}submitForm(){const a=document.getElementById("inputName").value,b=document.getElementById("inputGameCode").value;this.gameID==b?this.name!=a&&(this.name=a,this.socket.emit("change name",a)):(this.name=a,this.gameID=b,this.joinGame())}}"undefined"!=typeof module&&(module.exports=UIController);